// Place your key bindings in this file to override the defaults
[
    {
        "key": "ctrl-h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl-j",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl-k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl-l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "space ,",
        "command": "workbench.action.showAllEditors",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "space e",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
    },
    // Coding
    {
        "key": "shift-j",
        "command": "editor.action.moveLinesDownAction",
        "when": "vim.mode != 'Insert' && editorTextFocus"
    },
    {
        "key": "ctrl-d",
        "command": "cursorPageDown",
        "when": "vim.mode != 'Insert' && editorTextFocus"
    },
    {
        "key": "ctrl-u",
        "command": "cursorPageUp",
        "when": "vim.mode != 'Insert' && editorTextFocus"
    },
    {
        "key": "shift-k",
        "command": "editor.action.moveLinesUpAction",
        "when": "vim.mode != 'Insert' && editorTextFocus"
    },
    {
        "key": "shift-k",
        "command": "editor.action.showHover",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space c a",
        "command": "editor.action.codeAction",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space c r",
        "command": "editor.action.rename",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space c s",
        "command": "workbench.action.gotoSymbol",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space b d",
        "command": "workbench.action.closeActiveEditor",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space space",
        "command": "workbench.action.quickOpen",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    //Explorer
    {
        "key": "r",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "c",
        "command": "filesExplorer.copy",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "x",
        "command": "filesExplorer.cut",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "d",
        "command": "deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "s",
        "command": "explorer.openToSide",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift-s",
        "command": "runCommands",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
        "args": {
            "commands": [
                "workbench.action.splitEditorDown",
                "explorer.openAndPassFocus",
                "workbench.action.closeOtherEditors"
            ]
        }
    },
    //debuging
    {
        "key": "space d a",
        "command": "workbench.action.debug.selectandstart",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && debuggersAvailable"
    },
    {
        "key": "space d t",
        "command": "workbench.action.debug.stop",
        "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && !focusedSessionIsAttached"
    },
    {
        "key": "space d o",
        "command": "workbench.action.debug.stepOver",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && inDebugMode && debugState == 'stopped'"
    },
    {
        "key": "space d b",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space d e",
        "command": "editor.debug.action.showDebugHover",
        "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && debugState == 'stopped'"
    },
    {
        "key": "space d c",
        "command": "workbench.action.debug.continue",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && inDebugMode && debugState == 'stopped'"
    },
    //special
    {
        "key": "ctrl-s",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.files.save",
                "extension.vim_escape",
                "editor.action.formatDocument"
            ],
            "when": "vim.mode == 'Normal' || vim.mode == 'Insert'"
        }
    },
    {
        "key": "g shift+i",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
    },
    {
        "key": "g shift+i",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    }
]
